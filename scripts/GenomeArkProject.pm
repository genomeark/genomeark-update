package GenomeArkProject;

require Exporter;

@ISA    = qw(Exporter);
@EXPORT = qw(loadProjectMap getAllProjectNames getProjectID makeIndexPage);

use strict;
use warnings;

use Time::Local;
use List::Util;

my %projectID;
my %projectIDtoProjectName;
my %projectIDtoProjectURL;
my %speciesToProjectID;


sub loadProjectMap () {
    my  $proj;

    open(F, "< projects/species-to-project-map") or die;
    while (<F>) {
        s/^\s+//;
        s/\s+$//;

        next   if (m/^$/);
        next   if (m/^#/);

        if   (m/^name:\s*(.*)$/i) {                   #  Match a project text name.
            $projectIDtoProjectName{$proj} = $1;
            print "  New PROJECT name '$proj' '$1'\n";
        }
        elsif (m/^url:\s*(.*)$/i) {                    #  Match a project URL.
            $projectIDtoProjectURL{$proj} = $1;
            print "  New PROJECT url  '$proj' '$1'\n";
        }
        elsif (m/^([a-zA-Z0-9]+):$/) {                 #  Match a project definition name.
            $proj = $1;
            $projectID{$proj} = 1;
            print "  New PROJECT '$proj'\n";
        }

        elsif (m/^([A-Z][a-z]+[a-z_]+)\s+(.*)$/) {   #  Match a species -> project mapping
            if (!exists($speciesToProjectID{$1})) {
                $speciesToProjectID{$1}  =   $2;
            } else {
                $speciesToProjectID{$1} .= " $2";
            }
        }
        elsif (m/^([A-Z][a-z_]+)$/) {                  #  Match an empty species -> project map.
            #  Empty map.
        }
        else {
            print STDERR "Invalid species-to-project-map line: '$_'\n";
            die;
        }
    }
    close(F);

    print "  Loaded ", scalar(keys %projectID),          " projects.\n";
    print "  Loaded ", scalar(keys %speciesToProjectID), " species.\n";

    return(scalar(keys %projectID));
}


sub getAllProjectNames () {
    return(keys %projectID);
}


sub getProjectID ($) {
    my $name = shift @_;
    my $proj = $speciesToProjectID{$name};
    return($proj);
}


#sub getProjectName ($) {
#    my $name = shift @_;
#    my $proj = $speciesToProjectID{$name};
#    return($projectIDtoProjectName{$proj});
#}


#sub getProjectURL ($) {
#    my $name = shift @_;
#    my $proj = $speciesToProjectID{$name};
#    return($projectIDtoProjectURL{$proj});
#}


sub makeIndexPage ($$$$) {
    my $projectid   = shift @_;
    my $basedir     = shift @_;
    my $catname     = shift @_;
    my $basedesc    = shift @_;
    my $description;

    my $pname = $projectIDtoProjectName{$projectid};
    my $purl  = $projectIDtoProjectName{$projectid};

    $description = "<a href=\"$purl\">$pname</a> $basedesc"   if  defined($pname) &&  defined($purl);
    $description =                   "$pname" . "$basedesc"   if  defined($pname) && !defined($purl);
    $description =                              "$basedesc"   if !defined($pname) &&  defined($purl);
    $description =                              "$basedesc"   if !defined($pname) && !defined($purl);

    system("mkdir -p $basedir/$catname");

    open(I, "> $basedir/$catname/index.html") or die "Can't open '$basedir/$catname/index.html' for writing: $!\n";

    print I "---\n";
    print I "#  Automagically generated by GenomeArkProject.pm\n";
    print I "layout: default\n";
    print I "title: GenomeArk\n";
    print I "---\n";
    print I "\n";
    print I "<h1 class=\"page-name\">$description</h1>\n";
    print I "\n";
    print I "<div class=\"posts\">\n";
    print I "<article class=\"post\">\n";
    print I "\n";
    print I "  {% if site.$catname %}\n";
    print I "\n";
    print I "  {% assign sorted = site.$catname | sort: 'name' %}\n";
    print I "\n";
    print I "  {% for species in sorted %}\n";
    print I "    {% include species-listing.html species=species %}\n";
    print I "  {% endfor %}\n";
    print I "\n";
    print I "  {% else %}\n";
    print I "\n";
    print I "No entries.\n";
    print I "\n";
    print I "  {% endif %}\n";
    print I "\n";
    print I "\n";
    print I "\n";
    print I "\n";
    print I "</article>\n";
    print I "</div>\n";

    close(I);
}

1;
