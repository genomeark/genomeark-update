package GenomeArkProject;

require Exporter;

@ISA    = qw(Exporter);
@EXPORT = qw(addProjectToSpecies loadProjectMetadata getAllProjectNames getProjectID makeIndexPage);

use strict;
use warnings;

use Time::Local;
use List::Util;
use YAML::XS;

my %projectID;
my %projectIDtoProjectName;
my %projectIDtoProjectURL;
my %speciesToProjectID;


#
#  Add a project to the string-list for a species.
#    addProjectToSpecies("mgp", "Kaiju_godzilla");
#

sub addProjectToSpecies ($$) {
    my $project = shift @_;
    my $species = shift @_;

    if (!exists($speciesToProjectID{$species})) {
        $speciesToProjectID{$species}  =   $project;
    } else {
        $speciesToProjectID{$species} .= " $project";
    }
}


#
#  Load project metadata.
#

sub loadProjectMetadata () {
    my $mdf = "genomeark-metadata/projects.yaml";

    print "\n";
    print "Discovering genome projects.\n";

    #print "Using libYAML ", YAML::XS::LibYAML::libyaml_version(), "\n";
    my $meta = YAML::XS::LoadFile($mdf);

    foreach my $p (@{$meta->{projects}}) {
        my $proj = $p->{ident};

        $projectID{$proj} = 1;

        $projectIDtoProjectName{$proj} = $p->{name};
        $projectIDtoProjectURL{$proj}  = $p->{url};
    }

    print "  Found ", scalar(keys %projectID), " genome projects.\n";
    foreach my $p (getAllProjectNames()) {
        printf "    %5s %-35s (%s)\n", "$p:", $projectIDtoProjectName{$p}, $projectIDtoProjectURL{$p};
    }

    return(scalar(keys %projectID));
}

#
#  Access projects.
#    getAllProjectNames  - returns array of projet idents we know.
#    getProjectID        - returns string-list ("vgp t2t") of projects for an individual.
#

sub getAllProjectNames () {
    return(keys %projectID);
}

sub getProjectID ($) {
    my $name = shift @_;
    my $proj = $speciesToProjectID{$name};
    return($proj);
}


#
#  Create 'index.html' that will list all species in a single project.
#

sub makeIndexPage ($$$$) {
    my $projectid   = shift @_;
    my $basedir     = shift @_;
    my $catname     = shift @_;
    my $basedesc    = shift @_;
    my $description;

    my $pname = $projectIDtoProjectName{$projectid};
    my $purl  = $projectIDtoProjectName{$projectid};

    $description = "<a href=\"$purl\">$pname</a> $basedesc"   if  defined($pname) &&  defined($purl);
    $description =                   "$pname" . "$basedesc"   if  defined($pname) && !defined($purl);
    $description =                              "$basedesc"   if !defined($pname) &&  defined($purl);
    $description =                              "$basedesc"   if !defined($pname) && !defined($purl);

    system("mkdir -p $basedir/$catname");

    open(I, "> $basedir/$catname/index.html") or die "Can't open '$basedir/$catname/index.html' for writing: $!\n";

    print I "---\n";
    print I "#\n";
    print I "#  Automagically generated by GenomeArkProject.pm\n";
    print I "#\n";
    print I "layout: default\n";
    print I "title: GenomeArk\n";
    print I "---\n";
    print I "<h1 class=\"species-list-page-name\">$description</h1>\n";
    print I "\n";
    print I "<div class=\"species-list\">\n";
    print I "{% if site.$catname %}\n";
    print I " {% assign sorted = site.$catname | sort: 'name' %}\n";
    print I " {% for species in sorted %}\n";
    print I " {% include species-listing.html species=species %}\n";
    print I " {% endfor %}\n";
    print I "{% else %}\n";
    print I " No entries.\n";
    print I "{% endif %}\n";
    print I "</div>\n";

    close(I);
}

1;
